// Mocks generated by Mockito 5.4.6 from annotations
// in securyflex_app/test/reputation/bloc/reputation_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:securyflex_app/reputation/models/reputation_data.dart' as _i2;
import 'package:securyflex_app/reputation/services/reputation_calculation_service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeReputationData_0 extends _i1.SmartFake
    implements _i2.ReputationData {
  _FakeReputationData_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ReputationCalculationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockReputationCalculationService extends _i1.Mock
    implements _i3.ReputationCalculationService {
  MockReputationCalculationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ReputationData> calculateReputation(
    String? userId,
    String? userRole,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#calculateReputation, [userId, userRole]),
            returnValue: _i4.Future<_i2.ReputationData>.value(
              _FakeReputationData_0(
                this,
                Invocation.method(#calculateReputation, [userId, userRole]),
              ),
            ),
          )
          as _i4.Future<_i2.ReputationData>);

  @override
  _i4.Future<_i2.ReputationData> getReputation(
    String? userId,
    String? userRole, {
    bool? useCache = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getReputation,
              [userId, userRole],
              {#useCache: useCache},
            ),
            returnValue: _i4.Future<_i2.ReputationData>.value(
              _FakeReputationData_0(
                this,
                Invocation.method(
                  #getReputation,
                  [userId, userRole],
                  {#useCache: useCache},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.ReputationData>);

  @override
  _i4.Future<void> updateReputationAfterJob({
    required String? userId,
    required String? userRole,
    required String? workflowId,
    required bool? jobCompleted,
    double? newRating,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateReputationAfterJob, [], {
              #userId: userId,
              #userRole: userRole,
              #workflowId: workflowId,
              #jobCompleted: jobCompleted,
              #newRating: newRating,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void invalidateCache() => super.noSuchMethod(
    Invocation.method(#invalidateCache, []),
    returnValueForMissingStub: null,
  );
}
